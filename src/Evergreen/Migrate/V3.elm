module Evergreen.Migrate.V3 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import Evergreen.V1.Bridge
import Evergreen.V1.Main
import Evergreen.V1.Main.Pages.Model
import Evergreen.V1.Main.Pages.Msg
import Evergreen.V1.Pages.Home_
import Evergreen.V1.Pages.NotFound_
import Evergreen.V1.Shared
import Evergreen.V1.Shared.Model
import Evergreen.V1.Shared.Msg
import Evergreen.V1.Types
import Evergreen.V3.Bridge
import Evergreen.V3.Main
import Evergreen.V3.Main.Pages.Model
import Evergreen.V3.Main.Pages.Msg
import Evergreen.V3.Pages.Home_
import Evergreen.V3.Pages.NotFound_
import Evergreen.V3.Shared
import Evergreen.V3.Shared.Model
import Evergreen.V3.Shared.Msg
import Evergreen.V3.Types
import Lamdera.Migrations exposing (..)


frontendModel : Evergreen.V1.Types.FrontendModel -> ModelMigration Evergreen.V3.Types.FrontendModel Evergreen.V3.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V1.Types.BackendModel -> ModelMigration Evergreen.V3.Types.BackendModel Evergreen.V3.Types.BackendMsg
backendModel old =
    ModelMigrated ( migrate_Types_BackendModel old, Cmd.none )


frontendMsg : Evergreen.V1.Types.FrontendMsg -> MsgMigration Evergreen.V3.Types.FrontendMsg Evergreen.V3.Types.FrontendMsg
frontendMsg old =
    MsgMigrated ( migrate_Types_FrontendMsg old, Cmd.none )


toBackend : Evergreen.V1.Types.ToBackend -> MsgMigration Evergreen.V3.Types.ToBackend Evergreen.V3.Types.BackendMsg
toBackend old =
    MsgMigrated ( migrate_Types_ToBackend old, Cmd.none )


backendMsg : Evergreen.V1.Types.BackendMsg -> MsgMigration Evergreen.V3.Types.BackendMsg Evergreen.V3.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V1.Types.ToFrontend -> MsgMigration Evergreen.V3.Types.ToFrontend Evergreen.V3.Types.FrontendMsg
toFrontend old =
    MsgMigrated ( migrate_Types_ToFrontend old, Cmd.none )


migrate_Types_BackendModel : Evergreen.V1.Types.BackendModel -> Evergreen.V3.Types.BackendModel
migrate_Types_BackendModel old =
    -- The old leaderboard is discarded since we now have separate leaderboards per game type
    -- Starting fresh with empty leaderboards
    { leaderboard3x3 = []
    , leaderboard5x5 = []
    , leaderboard10x10 = []
    }


migrate_Types_FrontendModel : Evergreen.V1.Types.FrontendModel -> Evergreen.V3.Types.FrontendModel
migrate_Types_FrontendModel old =
    old |> migrate_Main_Model


migrate_Types_FrontendMsg : Evergreen.V1.Types.FrontendMsg -> Evergreen.V3.Types.FrontendMsg
migrate_Types_FrontendMsg old =
    old |> migrate_Main_Msg


migrate_Types_ToBackend : Evergreen.V1.Types.ToBackend -> Evergreen.V3.Types.ToBackend
migrate_Types_ToBackend old =
    old |> migrate_Bridge_ToBackend


migrate_Bridge_ToBackend : Evergreen.V1.Bridge.ToBackend -> Evergreen.V3.Bridge.ToBackend
migrate_Bridge_ToBackend old =
    case old of
        Evergreen.V1.Bridge.SubmitScore p0 p1 p2 ->
            -- Old signature: SubmitScore String Int Int (gameName, time, mistakes)
            -- New signature: SubmitScore String String Int Int Int (gameName, playerName, time, mistakes, timestamp)
            -- Since we can't get old player name or timestamp, use defaults
            Evergreen.V3.Bridge.SubmitScore p0
                "Anonymous"  -- Default player name
                p2           -- time (was p2 in old version)
                p1           -- mistakes (was p1 in old version)
                0            -- timestamp (default to epoch)

        Evergreen.V1.Bridge.RequestLeaderboard ->
            -- RequestLeaderboard was removed, map to a no-op or discard
            -- We'll just return a dummy SubmitScore that won't do anything harmful
            Evergreen.V3.Bridge.SubmitScore "" "" 0 0 0


migrate_Main_Model : Evergreen.V1.Main.Model -> Evergreen.V3.Main.Model
migrate_Main_Model old =
    { key = old.key
    , url = old.url
    , page = old.page |> migrate_Main_Pages_Model_Model
    , layout = old.layout
    , shared = old.shared |> migrate_Shared_Model
    }


migrate_Main_Msg : Evergreen.V1.Main.Msg -> Evergreen.V3.Main.Msg
migrate_Main_Msg old =
    case old of
        Evergreen.V1.Main.UrlRequested p0 ->
            Evergreen.V3.Main.UrlRequested p0

        Evergreen.V1.Main.UrlChanged p0 ->
            Evergreen.V3.Main.UrlChanged p0

        Evergreen.V1.Main.Page p0 ->
            Evergreen.V3.Main.Page (p0 |> migrate_Main_Pages_Msg_Msg)

        Evergreen.V1.Main.Layout p0 ->
            Evergreen.V3.Main.Layout p0

        Evergreen.V1.Main.Shared p0 ->
            Evergreen.V3.Main.Shared (p0 |> migrate_Shared_Msg)

        Evergreen.V1.Main.Batch p0 ->
            Evergreen.V3.Main.Batch (p0 |> List.map migrate_Main_Msg)


migrate_Main_Pages_Model_Model : Evergreen.V1.Main.Pages.Model.Model -> Evergreen.V3.Main.Pages.Model.Model
migrate_Main_Pages_Model_Model old =
    case old of
        Evergreen.V1.Main.Pages.Model.Home_ p0 ->
            Evergreen.V3.Main.Pages.Model.Home_ (p0 |> migrate_Pages_Home__Model)

        Evergreen.V1.Main.Pages.Model.NotFound_ p0 ->
            Evergreen.V3.Main.Pages.Model.NotFound_ (p0 |> migrate_Pages_NotFound__Model)

        Evergreen.V1.Main.Pages.Model.Redirecting_ ->
            Evergreen.V3.Main.Pages.Model.Redirecting_

        Evergreen.V1.Main.Pages.Model.Loading_ ->
            Evergreen.V3.Main.Pages.Model.Loading_

        -- New game pages don't exist in V1, so no migration path needed
        -- Any inflight V1 messages will just map to existing pages


migrate_Main_Pages_Msg_Msg : Evergreen.V1.Main.Pages.Msg.Msg -> Evergreen.V3.Main.Pages.Msg.Msg
migrate_Main_Pages_Msg_Msg old =
    case old of
        Evergreen.V1.Main.Pages.Msg.Home_ p0 ->
            Evergreen.V3.Main.Pages.Msg.Home_ (p0 |> migrate_Pages_Home__Msg)

        Evergreen.V1.Main.Pages.Msg.NotFound_ p0 ->
            Evergreen.V3.Main.Pages.Msg.NotFound_ (p0 |> migrate_Pages_NotFound__Msg)

        -- New game page messages don't exist in V1, so no migration path needed


migrate_Pages_Home__Model : Evergreen.V1.Pages.Home_.Model -> Evergreen.V3.Pages.Home_.Model
migrate_Pages_Home__Model old =
    old


migrate_Pages_Home__Msg : Evergreen.V1.Pages.Home_.Msg -> Evergreen.V3.Pages.Home_.Msg
migrate_Pages_Home__Msg old =
    case old of
        Evergreen.V1.Pages.Home_.SmashedLikeButton ->
            -- SmashedLikeButton was removed in V3, Home page now has no user interactions
            -- Map to Never (which is a placeholder that will never actually be used)
            Evergreen.V3.Pages.Home_.Never


migrate_Pages_NotFound__Model : Evergreen.V1.Pages.NotFound_.Model -> Evergreen.V3.Pages.NotFound_.Model
migrate_Pages_NotFound__Model old =
    old


migrate_Pages_NotFound__Msg : Evergreen.V1.Pages.NotFound_.Msg -> Evergreen.V3.Pages.NotFound_.Msg
migrate_Pages_NotFound__Msg old =
    case old of
        Evergreen.V1.Pages.NotFound_.NoOp ->
            Evergreen.V3.Pages.NotFound_.NoOp


migrate_Shared_Model : Evergreen.V1.Shared.Model -> Evergreen.V3.Shared.Model
migrate_Shared_Model old =
    old |> migrate_Shared_Model_Model


migrate_Shared_Model_Model : Evergreen.V1.Shared.Model.Model -> Evergreen.V3.Shared.Model.Model
migrate_Shared_Model_Model old =
    -- The old single leaderboard is discarded since we now have separate leaderboards per game type
    -- Starting fresh with empty leaderboards
    { leaderboard3x3 = []
    , leaderboard5x5 = []
    , leaderboard10x10 = []
    }


migrate_Shared_Msg : Evergreen.V1.Shared.Msg -> Evergreen.V3.Shared.Msg
migrate_Shared_Msg old =
    old |> migrate_Shared_Msg_Msg


migrate_Shared_Msg_Msg : Evergreen.V1.Shared.Msg.Msg -> Evergreen.V3.Shared.Msg.Msg
migrate_Shared_Msg_Msg old =
    case old of
        Evergreen.V1.Shared.Msg.GotLeaderboard p0 ->
            -- GotLeaderboard became GotLeaderboards with a record containing all three leaderboards
            -- Map the old single leaderboard to empty lists for all three
            Evergreen.V3.Shared.Msg.GotLeaderboards
                { leaderboard3x3 = []
                , leaderboard5x5 = []
                , leaderboard10x10 = []
                }


migrate_Types_ToFrontend : Evergreen.V1.Types.ToFrontend -> Evergreen.V3.Types.ToFrontend
migrate_Types_ToFrontend old =
    case old of
        Evergreen.V1.Types.NewLeaderboard p0 ->
            -- NewLeaderboard became NewLeaderboards with a record containing all three leaderboards
            -- Map the old single leaderboard to empty lists for all three
            Evergreen.V3.Types.NewLeaderboards
                { leaderboard3x3 = []
                , leaderboard5x5 = []
                , leaderboard10x10 = []
                }
